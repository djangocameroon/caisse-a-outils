{
  "slug": "gestion-erreurs-django",
  "title": "Gestion des erreurs en Django",
  "category": "debugging",
  "summary": "Techniques et bonnes pratiques pour gérer les erreurs dans vos applications Django",
  "body": "## 1. Logging personnalisé\n\nConfigurez un système de logging robuste dans `settings.py` :\n\n```python\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'ERROR',\n            'class': 'logging.FileHandler',\n            'filename': 'django_errors.log',\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['file'],\n            'level': 'ERROR',\n            'propagate': True,\n        },\n    },\n}\n```\n\n## 2. Gestion des exceptions dans les vues\n\nUtilisez des try/except appropriés :\n\n```python\nfrom django.http import JsonResponse\nfrom django.core.exceptions import ValidationError\n\ndef ma_vue(request):\n    try:\n        # Votre logique métier\n        result = process_data(request.data)\n        return JsonResponse({'success': True, 'data': result})\n    except ValidationError as e:\n        return JsonResponse({'error': str(e)}, status=400)\n    except Exception as e:\n        logger.error(f'Erreur inattendue: {e}')\n        return JsonResponse({'error': 'Erreur interne'}, status=500)\n```\n\n## 3. Middleware personnalisé pour les erreurs\n\nCréez un middleware pour capturer les erreurs globalement :\n\n```python\nimport logging\nfrom django.http import JsonResponse\n\nlogger = logging.getLogger(__name__)\n\nclass ErrorHandlingMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        response = self.get_response(request)\n        return response\n\n    def process_exception(self, request, exception):\n        logger.error(f'Exception: {exception}', exc_info=True)\n        return JsonResponse({'error': 'Erreur interne'}, status=500)\n```\n\n## 4. Tests d'erreurs\n\nTestez vos gestionnaires d'erreurs :\n\n```python\nfrom django.test import TestCase\nfrom django.urls import reverse\n\nclass ErrorHandlingTest(TestCase):\n    def test_validation_error_handling(self):\n        response = self.client.post('/api/data/', {'invalid': 'data'})\n        self.assertEqual(response.status_code, 400)\n        self.assertIn('error', response.json())\n```"
}